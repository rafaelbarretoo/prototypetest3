import streamlit as st
import pandas as pd
import os
import io
import plotly.express as px

st.set_page_config(page_title="üìä Projeto Pseudonimiza√ß√£o", page_icon="üìä")


st.markdown(
    "<div style='text-align: center; color: #4B0082; font-size: 40px;'>"
    "Resultados das Avalia√ß√µes" "<br>"
    "Projeto Pseudonimiza√ß√£o (Ana IA)"
    "</div>",
    unsafe_allow_html=True
)

#st.title("üìä Resultados das Avalia√ß√µes - Analista Virtual (Ana - IA)")

arquivo = "avaliacoes.xlsx"

df= pd.read_excel(arquivo)



media_geral_final = df["M√©dia Final"].mean()
media_problema = df["M√©dia Problema"].mean()
media_solucao = df["M√©dia Solu√ß√£o"].mean()

col4, col5, col6, col7 = st.columns(4)
with col4:
    st.metric("M√©dia Problema", f"{media_problema:.2f}")
with col5:
    st.metric("M√©dia Solu√ß√£o", f"{media_solucao:.2f}")
with col6:
    st.metric("M√©dia Geral", f"{media_geral_final:.2f}")
with col7:
    status = "Aprovada" if media_geral_final >= 4 else "Revis√£o" if media_geral_final >2 else "Reprovada"
    cor = "üü¢" if media_geral_final >= 4 else "üü°" if media_geral_final >2 else "üî¥"
    st.metric("Status do Projeto", f"{cor} {status}")




st.markdown("")

if os.path.exists(arquivo):
    df = pd.read_excel(arquivo)
   

    # Tabela de m√©dias
    
    colunas_medias = [
        "Avaliador",
        "M√©dia Problema",
        "M√©dia Solu√ß√£o",
        "M√©dia Final"
    ]
    df_medias = df[colunas_medias]
    

    # Gr√°fico com as m√©dias
    st.subheader("üìä Gr√°fico de M√©dias por Avaliador")
    df_plot = df_medias.melt(id_vars=["Avaliador"], var_name="Crit√©rio", value_name="Nota")
    fig = px.bar(df_plot, x="Avaliador", y="Nota", color="Crit√©rio", barmode="group")
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìà Tabela de M√©dias por Avaliador")
    st.dataframe(df_medias)


# Tabela completa
    st.subheader("üìã Tabela Completa")

    df.index = df.index +1
    df.name= "Posi√ß√£o"

    st.dataframe(df)

    media_colunas = df.mean(numeric_only= True)

    st.write("M√©dia de cada crit√©rio")
    st.dataframe(media_colunas.to_frame(name="M√©dia").T)

#Gr√°fico de matriz

st.markdown("## Matriz de An√°lise (Problema x Impacto)")
if "M√©dia Problema" in df.columns and "M√©dia Solu√ß√£o" in df.columns:
    fig_matrix = px.scatter(
        df,
        x="M√©dia Problema",
        y= "Impacto da Solu√ß√£o",
        color = "Avaliador",
        size = "M√©dia Final",
        hover_data=["M√©dia Solu√ß√£o"],
        title= "Matriz: Gravidade do Problema vs Impacto da Solu√ß√£o"
    )
    st.plotly_chart(fig_matrix, use_container_width= True)
else:
    st.info("Colunas necess√°rias para a matriz n√£o est√£o dispon√≠veis.")

    
st.markdown("## Estat√≠sticas por Crit√©rio")
estatisticas = df.describe().T[["mean", "50%", "std"]].rename(columns={"mean":"M√©dia", "50%": "Mediana", "std":"Desvio Padr√£o"})
st.dataframe(estatisticas.style.format("{:.2f}"), use_container_width= True)



avaliadores_esperados = 8 #lembrar de substituir
total_avaliadores = df["Avaliador"].nunique()
avaliadores_pendentes = max(0, avaliadores_esperados - total_avaliadores)

col1, col2 = st.columns(2)
with col1:
    st.metric("Avalia√ß√µs Realizadas", total_avaliadores)
with col2:
    st.metric("Avalia√ß√µes Pendentes", avaliadores_pendentes)

# Coment√°rios e Observa√ß√µes 
if "Avaliador" in df.columns and "Observa√ß√£o" in df.columns:
    st.markdown(
    "<div style='text-align: center; color: #4B0082; font-size: 25px;'>"
    "Observa√ß√µes e coment√°rios"
    "</div>",
    unsafe_allow_html=True
)

    for index, row in df.iterrows():
        if pd.notna(row["Observa√ß√£o"]):
            with st.container():
                st.write(f"**Avaliador:** {row['Avaliador']} ")
                st.info(f">{row['Observa√ß√£o']}")
                st.markdown("----------")
        else:
            st.write(f"**Avaliador:** {row['Avaliador']}")
            st.warning(">N√£o registrou coment√°rios !")
            st.markdown("----------")
            
    # Bot√µes de download
    st.subheader("‚¨áÔ∏è Exportar Tabelas")

    # CSV
    csv_buffer = io.StringIO()
    df.to_csv(csv_buffer, index=False)
    st.download_button("Download CSV", csv_buffer.getvalue(), file_name="avaliacoes.csv", mime="text/csv")

    # Excel
    excel_buffer = io.BytesIO()
    with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False)
    st.download_button("Download Excel", excel_buffer.getvalue(), file_name="avaliacoes.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

else:
    st.warning("Ainda n√£o h√° avalia√ß√µes salvas.")


if media_geral_final <= 2:
    mensagem = "Proposta de Projeto **reprovada**"
elif 2 < media_geral_final <= 4:
    mensagem = "Proposta de projeto precisa de uma **revis√£o**"
else:
    mensagem = "Proposta de projeto **aprovada**"


st.markdown(f"""
            Sua m√©dia final foi: {media_geral_final:.2f}""")
st.markdown(mensagem)


st.caption("CIP - Central de Inova√ß√µes e Projetos")